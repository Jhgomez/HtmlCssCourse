* {
  margin: 0;
  padding: 0;
}

h1,
h2,
h3 {
  /* color: rgba(16, 152, 173, 0.3); */
  color: #1098ab;
}

h1 {
  font-size: 26px;
  margin-top: 0px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}

/* footer p {
  font-size: 16px;
} */

/* This rule can be applied using the "id" attribute in a container but it is always, always 
use the "class" attribute since it is reusable and can be applied to different components at 
the same time */
#copyright {
  font-size: 16px;
}

/* article header p {
  font-style: italic;
} */

/* this is the rule that will be applied to any component defining a "class" attribute
 with this name */
.related-author {
  font-size: 18px;
  font-weight: bold;
}

.no-bullet-ul {
  list-style: none;
}

body {
  border-top: #1098ab 10px solid;
  font-family: sans-serif;
  color: #444;
}

.header-background-gray {
  background-color: #f7f7f7;
  padding: 20px 40px;
  margin-bottom: 60px;
  height: 80px;
}

.article-header {
  margin-bottom: 40px;
}

.post-img {
  width: 100%;
  height: auto;
}

aside {
  padding: 50px;
  background-color: #f7f7f7;
  border-top: 5px solid #1098ab;
  border-bottom: 5px solid #1098ab;
  /* vertical padding and horizontal padding */
  padding: 50px 0;
  width: 500px;
}

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
  margin-bottom: 0;
}

/* can hold values of numbers or keywords, "odd" "even" */
li:nth-child(2) {
  color: #1098ab;
}

article p:last-child {
  color: red;
}

article {
  margin-bottom: 60px;
}

/* we can format anchors/links that actually has an URL, and/or has been visited by
 using pseudo classes, this enables you to even styl components/containers depending on its state
 using pseudo classe  */
a:link {
  color: #1098ab;
  text-decoration: none;
}

a:visited {
  color: #1098ab;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline;
}

a:active {
  background-color: black;
  font-style: italic;
  /* you can use a modifier like this to give it priority if there 
  is styling conflicts
  font-style: italic !important; */
}
